{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","hooks/useTypedSelector.ts","store/reducers/contacts/types.ts","api/UserService.ts","store/reducers/auth/action-creators.ts","api/ContactsService.ts","store/reducers/contacts/action-creators.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginForm.tsx","pages/Login.tsx","store/reducers/contacts/index.ts","hooks/useDebounceSearch.ts","router/index.ts","hooks/useContactsSearch.ts","components/ContactForm.tsx","components/Loader.tsx","components/Contact.tsx","components/ContactsList.tsx","pages/Contacts.tsx","router/AppRouter.tsx","components/Navbar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","rules","message","type","required","useTypedSelector","useSelector","ContactsActionEnum","UserService","username","searchedUser","JSON","parse","stringify","UsersMock","filter","user","AuthActionCreators","setUser","SET_USER","payload","setIsAuth","auth","SET_AUTH","setIsLoading","SET_IS_LOADING","setError","SET_ERROR","login","password","dispatch","a","setTimeout","data","length","userData","localStorage","setItem","e","logout","removeItem","ContactsService","userId","UserContactsMock","find","id","ContactsActionCreators","fetchContacts","setIsLoadingContact","userContacts","fetchUserContacts","addAllContact","contacts","setErrorContact","ADD_ALL_CONTACTS","addContact","ADD_CONTACT","delContact","DEL_CONTACT","setContact","SET_CONTACT","SET_IS_LOADING_CONTACTS","SET_ERROR_CONTACT","setEditableContact","SET_EDITABLE_CONTACT","setMethodForm","SET_METHOD_FORM","setIsShowModalContact","SET_IS_SHOW_MODAL_CONTACT","allActionCreators","useActions","useDispatch","bindActionCreators","LoginForm","state","authReducer","error","isLoading","useState","setUsername","setPassword","onFinish","style","color","Item","labelCol","span","wrapperCol","label","name","value","onChange","target","htmlType","loading","width","Login","backgroundColor","justify","align","className","editableContactInit","phone","company","email","position","initialState","editableContact","methodForm","isShowModalContact","RouteNames","useDebounce","delay","debouncedValue","setDebouncedValue","useEffect","timer","clearTimeout","useContactSearch","filteredContacts","setFilteredContacts","search","setSearch","tmpFilterContacts","contact","Object","entries","some","key","String","toLowerCase","includes","searchUpdate","onSearchChange","ContactForm","React","memo","props","contactsReducer","Form","useForm","form","titleModal","handleReset","resetFields","handleCancel","layout","autoComplete","values","onReset","initialValues","autoFocus","placeholder","prefix","UserOutlined","PhoneOutlined","MailOutlined","TeamOutlined","TagOutlined","gutter","onClick","antIcon","LoadingOutlined","fontSize","spin","Loader","indicator","Contact","onEditCLick","onDoubleClick","ContactsList","map","Contacts","Search","margin","enterButton","PlusCircleFilled","visible","footer","closable","onCancel","destroyOnClose","publicRoutes","path","LOGIN","exact","component","privateRoutes","CONTACTS","AppRouter","isAuth","route","to","Navbar","router","useHistory","Header","theme","mode","selectable","push","App","lsUser","getItem","overflow","Content","maxWidth","action","uuidv4","rootReducer","combineReducers","reducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afe8901f.chunk.js","sourcesContent":["import { IUser } from \"../../../models/IUser\";\n\nexport interface AuthState {\n  isAuth: boolean;\n  user: IUser;\n  isLoading: boolean;\n  error: string;\n}\n\nexport enum AuthActionEnum {\n  SET_AUTH = \"SET_AUTH\",\n  SET_ERROR = \"SET_ERROR\",\n  SET_USER = \"SET_USER\",\n  SET_IS_LOADING = \"SET_IS_LOADING\",\n}\n\nexport interface SetAuthAction {\n  type: AuthActionEnum.SET_AUTH;\n  payload: boolean;\n}\nexport interface SetErrorAction {\n  type: AuthActionEnum.SET_ERROR;\n  payload: string;\n}\nexport interface SetUserAction {\n  type: AuthActionEnum.SET_USER;\n  payload: IUser;\n}\nexport interface SetIsLoadingAction {\n  type: AuthActionEnum.SET_IS_LOADING;\n  payload: boolean;\n}\n\nexport type AuthAction =\n  | SetAuthAction\n  | SetUserAction\n  | SetErrorAction\n  | SetIsLoadingAction;\n","import { RuleType } from \"rc-field-form/lib/interface\";\n\nexport const rules = {\n  required: (\n    message: string = \"Obligatory field\",\n    type: RuleType = \"string\"\n  ) => ({\n    required: true,\n    type,\n    message,\n  }),\n};\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {RootState} from \"../store\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { IContact } from \"../../../models/IContact\";\n\nexport type methodFormType = \"edit-contact\" | \"add-contact\";\n\nexport interface ContactsState {\n  contacts: IContact[];\n  editableContact: IContact;\n  methodForm: methodFormType;\n  isLoading: boolean;\n  isShowModalContact: boolean;\n  error: string;\n}\n\nexport enum ContactsActionEnum {\n  SET_ERROR_CONTACT = \"SET_ERROR_CONTACT\",\n  SET_CONTACT = \"SET_CONTACT\",\n  ADD_CONTACT = \"ADD_CONTACT\",\n  ADD_ALL_CONTACTS = \"ADD_ALL_CONTACTS\",\n  DEL_CONTACT = \"DEL_CONTACT\",\n  SET_EDITABLE_CONTACT = \"SET_EDITABLE_CONTACT\",\n  SET_METHOD_FORM = \"SET_METHOD_FORM\",\n  SET_IS_LOADING_CONTACTS = \"SET_IS_LOADING_CONTACTS\",\n  SET_IS_SHOW_MODAL_CONTACT = \"SET_IS_SHOW_MODAL_CONTACT\",\n}\n\nexport interface SetErrorContactAction {\n  type: ContactsActionEnum.SET_ERROR_CONTACT;\n  payload: string;\n}\nexport interface SetContactAction {\n  type: ContactsActionEnum.SET_CONTACT;\n  payload: IContact;\n}\nexport interface SetEditableContactAction {\n  type: ContactsActionEnum.SET_EDITABLE_CONTACT;\n  payload: IContact;\n}\nexport interface SetMethodFormtAction {\n  type: ContactsActionEnum.SET_METHOD_FORM;\n  payload: methodFormType;\n}\nexport interface AddContactAction {\n  type: ContactsActionEnum.ADD_CONTACT;\n  payload: IContact;\n}\nexport interface AddAllContactAction {\n  type: ContactsActionEnum.ADD_ALL_CONTACTS;\n  payload: IContact[];\n}\nexport interface DelContactAction {\n  type: ContactsActionEnum.DEL_CONTACT;\n  payload: string;\n}\nexport interface SetIsLoadingContactsAction {\n  type: ContactsActionEnum.SET_IS_LOADING_CONTACTS;\n  payload: boolean;\n}\n\nexport interface SetIsShowModalContact {\n  type: ContactsActionEnum.SET_IS_SHOW_MODAL_CONTACT;\n  payload: boolean;\n}\n\nexport type ContactsAction =\n  | SetContactAction\n  | AddContactAction\n  | AddAllContactAction\n  | DelContactAction\n  | SetEditableContactAction\n  | SetMethodFormtAction\n  | SetErrorContactAction\n  | SetIsShowModalContact\n  | SetIsLoadingContactsAction;\n","import axios, { AxiosResponse } from \"axios\";\nimport { IUser } from \"../models/IUser\";\n\n// export default class UserService {\n// static async auth(username: string): Promise<AxiosResponse<IUser[]>> {\n//   return axios.get<IUser[]>(\n//     `http://localhost:5000/users?username=${username}`\n//   );\n// }\n\n// static auth(username: string): IUser[] {\n//   return [\n//     {\n//       id: \"1\",\n//       username: \"user\",\n//       password: \"123\",\n//     },\n//   ] as IUser[];\n// }\n// }\n\n///////// gh-pages /////////\nimport UsersMock from \"./mockData/users_mock.json\";\n\nexport default class UserService {\n  static auth(username: string): IUser[] {\n    const users = JSON.parse(JSON.stringify(UsersMock));\n\n    const searchedUser: IUser[] = users.filter(\n      (user: IUser) => user.username === username\n    );\n\n    if (searchedUser) {\n      return searchedUser;\n    } else {\n      return [] as IUser[];\n    }\n  }\n}\n///////// gh-pages /////////\n","import { AppDispatch } from \"../../index\";\nimport {\n  AuthActionEnum,\n  SetAuthAction,\n  SetErrorAction,\n  SetIsLoadingAction,\n  SetUserAction,\n} from \"./types\";\nimport UserService from \"../../../api/UserService\";\nimport { IUser } from \"../../../models/IUser\";\n\nexport const AuthActionCreators = {\n  setUser: (user: IUser): SetUserAction => ({\n    type: AuthActionEnum.SET_USER,\n    payload: user,\n  }),\n  setIsAuth: (auth: boolean): SetAuthAction => ({\n    type: AuthActionEnum.SET_AUTH,\n    payload: auth,\n  }),\n  setIsLoading: (payload: boolean): SetIsLoadingAction => ({\n    type: AuthActionEnum.SET_IS_LOADING,\n    payload,\n  }),\n  setError: (payload: string): SetErrorAction => ({\n    type: AuthActionEnum.SET_ERROR,\n    payload,\n  }),\n  login: (user: string, password: string) => async (dispatch: AppDispatch) => {\n    try {\n      dispatch(AuthActionCreators.setIsLoading(true));\n      setTimeout(async () => {\n        // const { data } = await UserService.auth(user);\n\n        ///////// gh-pages /////////\n        const data = UserService.auth(user);\n        ///////// gh-pages /////////\n\n        if (!data.length) {\n          dispatch(\n            AuthActionCreators.setError(\"Incorrect username or password\")\n          );\n          return;\n        }\n\n        const userData = data[0];\n        if (password === userData.password) {\n          userData.password = \"secret\";\n          localStorage.setItem(\"user\", JSON.stringify(userData));\n          dispatch(AuthActionCreators.setUser(userData));\n          dispatch(AuthActionCreators.setIsAuth(true));\n          dispatch(AuthActionCreators.setError(\"\"));\n        } else {\n          dispatch(\n            AuthActionCreators.setError(\"Incorrect username or password\")\n          );\n        }\n      }, 1000);\n    } catch (e) {\n      dispatch(AuthActionCreators.setError(\"Login error\"));\n    } finally {\n      dispatch(AuthActionCreators.setIsLoading(false));\n    }\n  },\n  logout: () => async (dispatch: AppDispatch) => {\n    localStorage.removeItem(\"user\");\n    dispatch(AuthActionCreators.setUser({} as IUser));\n    dispatch(AuthActionCreators.setIsAuth(false));\n  },\n};\n","import axios, { AxiosResponse } from \"axios\";\nimport { IContact } from \"./../models/IContact\";\nimport UserContactsMock from \"./mockData/user-contacts_mock.json\";\n\nexport interface IFetchUserContacts {\n  id: string;\n  contacts: IContact[];\n}\n\n//Mock data for gh-pages\nexport default class ContactsService {\n  static fetchUserContacts(userId: string): IFetchUserContacts {\n    const userContacts: IFetchUserContacts[] = JSON.parse(\n      JSON.stringify(UserContactsMock)\n    );\n\n    const searchedUser = userContacts.find((user) => user.id == userId);\n    if (searchedUser) {\n      return searchedUser;\n    } else {\n      return {} as IFetchUserContacts;\n    }\n  }\n}\n\n// export default class ContactsService {\n//   // static async fetchUserContacts(\n//   //   userId: string\n//   // ): Promise<AxiosResponse<IFetchUserContacts>> {\n//   //   return axios.get<IFetchUserContacts>(\n//   //     `http://localhost:5000/user-contacts/${userId}`\n//   //   );\n//   // }\n// }\n","import { AppDispatch } from \"../../index\";\nimport ContactsService from \"../../../api/ContactsService\";\nimport { IContact } from \"../../../models/IContact\";\nimport { SetIsShowModalContact } from \"./types\";\nimport {\n  DelContactAction,\n  SetContactAction,\n  AddAllContactAction,\n  SetEditableContactAction,\n  methodFormType,\n  SetMethodFormtAction,\n  SetIsLoadingContactsAction,\n  ContactsActionEnum,\n  AddContactAction,\n  SetErrorContactAction,\n} from \"./types\";\n\nexport const ContactsActionCreators = {\n  fetchContacts: (userId: string) => async (dispatch: AppDispatch) => {\n    dispatch(ContactsActionCreators.setIsLoadingContact(true));\n    setTimeout(async () => {\n      try {\n        // const { data: userContacts } = await ContactsService.fetchUserContacts(\n        //   userId\n        // );\n\n        ///////// gh-pages /////////\n        const userContacts = ContactsService.fetchUserContacts(userId);\n        ///////// gh-pages /////////\n\n        dispatch(ContactsActionCreators.addAllContact(userContacts.contacts));\n      } catch (e) {\n        dispatch(ContactsActionCreators.setErrorContact(\"Contacts error\"));\n      } finally {\n        dispatch(ContactsActionCreators.setIsLoadingContact(false));\n      }\n    }, 1000);\n  },\n  addAllContact: (payload: IContact[]): AddAllContactAction => ({\n    type: ContactsActionEnum.ADD_ALL_CONTACTS,\n    payload,\n  }),\n  addContact: (payload: IContact): AddContactAction => ({\n    type: ContactsActionEnum.ADD_CONTACT,\n    payload,\n  }),\n  delContact: (payload: string): DelContactAction => ({\n    type: ContactsActionEnum.DEL_CONTACT,\n    payload,\n  }),\n  setContact: (payload: IContact): SetContactAction => ({\n    type: ContactsActionEnum.SET_CONTACT,\n    payload,\n  }),\n  setIsLoadingContact: (payload: boolean): SetIsLoadingContactsAction => ({\n    type: ContactsActionEnum.SET_IS_LOADING_CONTACTS,\n    payload,\n  }),\n  setErrorContact: (payload: string): SetErrorContactAction => ({\n    type: ContactsActionEnum.SET_ERROR_CONTACT,\n    payload,\n  }),\n  setEditableContact: (payload: IContact): SetEditableContactAction => ({\n    type: ContactsActionEnum.SET_EDITABLE_CONTACT,\n    payload,\n  }),\n  setMethodForm: (payload: methodFormType): SetMethodFormtAction => ({\n    type: ContactsActionEnum.SET_METHOD_FORM,\n    payload,\n  }),\n  setIsShowModalContact: (payload: boolean): SetIsShowModalContact => ({\n    type: ContactsActionEnum.SET_IS_SHOW_MODAL_CONTACT,\n    payload,\n  }),\n};\n","import { AuthActionCreators } from \"./auth/action-creators\";\nimport { ContactsActionCreators } from \"./contacts/action-creators\";\n\nexport const allActionCreators = {\n  ...AuthActionCreators,\n  ...ContactsActionCreators,\n};\n","import { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { allActionCreators } from \"../store/reducers/action-creators\";\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n  return bindActionCreators(allActionCreators, dispatch);\n};\n","import React, { useState } from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport { rules } from \"../utils/rules\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\nimport { useActions } from \"../hooks/useActions\";\n\nconst LoginForm = () => {\n  //Actions\n  const { login } = useActions();\n\n  //Redux state\n  const { error, isLoading } = useTypedSelector((state) => state.authReducer);\n\n  //Local state\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const submit = () => {\n    login(username, password);\n  };\n\n  return (\n    <Form onFinish={submit}>\n      {error && <div style={{ color: \"red\" }}>{error}</div>}\n\n      <Form.Item\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        label=\"Username\"\n        name=\"username\"\n        rules={[rules.required(\"Enter username!\")]}\n      >\n        <Input value={username} onChange={(e) => setUsername(e.target.value)} />\n      </Form.Item>\n\n      <Form.Item\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        label=\"Password\"\n        name=\"password\"\n        rules={[rules.required(\"Enter password!\")]}\n      >\n        <Input\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type={\"password\"}\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          loading={isLoading}\n          style={{ width: \"100%\" }}\n        >\n          LOG IN\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","import React, { FC } from \"react\";\nimport { Card, Layout, Row } from \"antd\";\nimport LoginForm from \"../components/LoginForm\";\n\nconst Login: FC = () => {\n  return (\n    <Layout style={{ backgroundColor: \"white\" }}>\n      <Row justify=\"center\" align=\"middle\" className=\"h100\">\n        <Card>\n          <LoginForm />\n        </Card>\n      </Row>\n    </Layout>\n  );\n};\n\nexport default Login;\n","import { ContactsState, ContactsAction, ContactsActionEnum } from \"./types\";\nimport { IContact } from \"../../../models/IContact\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const editableContactInit: IContact = {\n  id: \"\",\n  name: \"\",\n  phone: \"\",\n  company: \"\",\n  email: \"\",\n  position: \"\",\n};\n\nconst initialState: ContactsState = {\n  error: \"\",\n  isLoading: false,\n  editableContact: editableContactInit,\n  methodForm: \"add-contact\",\n  isShowModalContact: false,\n  contacts: [] as IContact[],\n};\n\nexport default function contactsReducer(\n  state = initialState,\n  action: ContactsAction\n): ContactsState {\n  switch (action.type) {\n    case ContactsActionEnum.ADD_ALL_CONTACTS:\n      return { ...state, contacts: action.payload };\n\n    case ContactsActionEnum.ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [{ ...action.payload, id: uuidv4() }, ...state.contacts],\n      };\n\n    case ContactsActionEnum.DEL_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id !== action.payload\n        ),\n      };\n\n    case ContactsActionEnum.SET_CONTACT:\n      const setContact = {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id ? { ...action.payload } : contact\n        ),\n      };\n      return setContact;\n\n    case ContactsActionEnum.SET_EDITABLE_CONTACT:\n      return { ...state, editableContact: action.payload };\n\n    case ContactsActionEnum.SET_METHOD_FORM:\n      return { ...state, methodForm: action.payload };\n\n    case ContactsActionEnum.SET_IS_LOADING_CONTACTS:\n      return { ...state, isLoading: action.payload };\n\n    case ContactsActionEnum.SET_IS_SHOW_MODAL_CONTACT:\n      return { ...state, isShowModalContact: action.payload };\n\n    default:\n      return state;\n  }\n}\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useDebounce = <T>(value: T, delay: number = 500): T => {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setDebouncedValue(value), delay);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n};\r\n\r\nexport default useDebounce;\r\n","import React from \"react\";\nimport Login from \"../pages/Login\";\nimport Contacts from \"../pages/Contacts\";\n\nexport interface IRoute {\n  path: string;\n  component: React.ComponentType;\n  exact?: boolean;\n}\n\nexport enum RouteNames {\n  LOGIN = \"/login\",\n  CONTACTS = \"/\",\n}\n\nexport const publicRoutes: IRoute[] = [\n  { path: RouteNames.LOGIN, exact: true, component: Login },\n];\n\nexport const privateRoutes: IRoute[] = [\n  { path: RouteNames.CONTACTS, exact: true, component: Contacts },\n];\n","import { IContact } from \"../models/IContact\";\r\nimport { useState, ChangeEvent, useEffect } from \"react\";\r\nimport useDebounce from \"./useDebounceSearch\";\r\n\r\nconst useContactSearch = (contacts: IContact[]) => {\r\n  const [filteredContacts, setFilteredContacts] = useState(contacts);\r\n  const [search, setSearch] = useState(\"\");\r\n  const debouncedValue = useDebounce(search);\r\n\r\n  const onSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearch(e.target.value.toLowerCase());\r\n  };\r\n\r\n  const searchUpdate = () => {\r\n    const tmpFilterContacts = contacts.filter((contact) =>\r\n      Object.entries(contact).some(\r\n        ([key, value]) =>\r\n          key !== \"id\" && String(value).toLowerCase().includes(debouncedValue)\r\n      )\r\n    );\r\n    setFilteredContacts(tmpFilterContacts);\r\n  };\r\n\r\n  useEffect(() => {\r\n    searchUpdate();\r\n  }, [debouncedValue, contacts]);\r\n\r\n  return { filteredContacts, onSearchChange };\r\n};\r\n\r\nexport default useContactSearch;\r\n","import React from \"react\";\r\nimport { IContact } from \"../models/IContact\";\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\r\nimport { useActions } from \"../hooks/useActions\";\r\nimport { rules } from \"../utils/rules\";\r\n\r\nimport { Row, Col, Form, Input, Button } from \"antd\";\r\nimport {\r\n  PhoneOutlined,\r\n  TagOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n  MailOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\ntype ContactFormType = {};\r\n\r\nconst ContactForm = React.memo((props: ContactFormType) => {\r\n  //Actions\r\n  const { addContact, setContact, setIsShowModalContact } = useActions();\r\n\r\n  //Redux state\r\n  const { methodForm, editableContact } = useTypedSelector(\r\n    (state) => state.contactsReducer\r\n  );\r\n  const { id, name, phone, company, email, position } = editableContact;\r\n  //Hook для работы с формой\r\n  const [form] = Form.useForm();\r\n\r\n  const titleModal =\r\n    methodForm === \"add-contact\" ? \"Add new contact\" : \"Edit contact\";\r\n\r\n  const handleSubmit = (values: IContact) => {\r\n    if (methodForm === \"add-contact\") {\r\n      addContact(values);\r\n    } else if (methodForm === \"edit-contact\") {\r\n      setContact({ ...values, id: id });\r\n    }\r\n    handleCancel();\r\n  };\r\n\r\n  const handleReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsShowModalContact(false);\r\n    form.resetFields();\r\n  };\r\n\r\n  return (\r\n    <Row justify=\"space-around\">\r\n      <h2>{titleModal}</h2>\r\n      <Col style={{ width: \"100%\" }}>\r\n        <Form\r\n          form={form}\r\n          name=\"contact-form\"\r\n          layout=\"vertical\"\r\n          autoComplete=\"off\"\r\n          onFinish={handleSubmit}\r\n          onReset={handleReset}\r\n          initialValues={{ name, phone, company, email, position }}\r\n        >\r\n          <Form.Item\r\n            label=\"Name\"\r\n            rules={[rules.required(\"Enter name\")]}\r\n            name=\"name\"\r\n          >\r\n            <Input\r\n              autoFocus\r\n              name=\"name\"\r\n              placeholder=\"Name\"\r\n              prefix={<UserOutlined />}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Phone\" name=\"phone\">\r\n            <Input\r\n              name=\"phone\"\r\n              placeholder=\"Phone\"\r\n              prefix={<PhoneOutlined />}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            rules={[{ type: \"email\", message: \"Is not valid email\" }]}\r\n          >\r\n            <Input name=\"email\" placeholder=\"Email\" prefix={<MailOutlined />} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Company\" name=\"company\">\r\n            <Input\r\n              name=\"company\"\r\n              placeholder=\"Company\"\r\n              prefix={<TeamOutlined />}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Position\" name=\"position\">\r\n            <Input\r\n              name=\"position\"\r\n              placeholder=\"Position\"\r\n              prefix={<TagOutlined />}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Row justify=\"end\" gutter={10}>\r\n              <Col>\r\n                <Button type=\"ghost\" htmlType=\"button\" onClick={handleReset}>\r\n                  Reset\r\n                </Button>\r\n              </Col>\r\n\r\n              <Col>\r\n                <Button type=\"ghost\" htmlType=\"button\" onClick={handleCancel}>\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n\r\n              <Col>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Save\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form.Item>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n});\r\n\r\nexport default React.memo(ContactForm);\r\n","import { Spin } from \"antd\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nconst Loader = () => <Spin indicator={antIcon} />;\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\nimport { FaUserAlt } from \"react-icons/fa\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\n\r\nimport { PhoneOutlined, MailOutlined } from \"@ant-design/icons\";\r\nimport { IContact } from \"../models/IContact\";\r\nimport { useActions } from \"../hooks/useActions\";\r\n\r\ntype ContactType = {\r\n  contact: IContact;\r\n};\r\n\r\nconst Contact = React.memo((props: ContactType) => {\r\n  const { contact } = props;\r\n  const { id, name, phone, email, company, position } = contact;\r\n\r\n  //Actions\r\n  const {\r\n    setEditableContact,\r\n    setMethodForm,\r\n    delContact,\r\n    setIsShowModalContact,\r\n  } = useActions();\r\n\r\n  const onEditCLick = () => {\r\n    setEditableContact(contact);\r\n    setMethodForm(\"edit-contact\");\r\n    setIsShowModalContact(true);\r\n  };\r\n\r\n  const onDeleteCLick = () => {\r\n    delContact(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"contact-wrap\" onDoubleClick={onEditCLick}>\r\n      <div>\r\n        <FaUserAlt style={{ fontSize: 20 }} />\r\n      </div>\r\n      <div>\r\n        <div className=\"contact-name\">{name}</div>\r\n        <div>\r\n          {company} {position}\r\n        </div>\r\n      </div>\r\n      <div className=\"contact-phone\">\r\n        <PhoneOutlined style={{ color: \"green\" }} />\r\n        {phone}\r\n      </div>\r\n      <div className=\"contact-email\">\r\n        <MailOutlined />\r\n        {email}\r\n      </div>\r\n\r\n      <div className=\"contact__btns\">\r\n        <FiEdit\r\n          className=\"contact-edit__icon icon-clicked\"\r\n          onClick={onEditCLick}\r\n        />\r\n        <AiFillDelete\r\n          className=\"contact-del__icon icon-clicked\"\r\n          onClick={onDeleteCLick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\r\nimport { IContact } from \"../models/IContact\";\r\nimport Contact from \"./Contact\";\r\n\r\ntype Props = {\r\n  contacts: IContact[];\r\n};\r\n\r\nconst ContactsList = React.memo((props: Props) => {\r\n  const { contacts } = props;\r\n  const { isLoading, error } = useTypedSelector(\r\n    (state) => state.contactsReducer\r\n  );\r\n  return (\r\n    <div className=\"contact-list-wrap\">\r\n      {error && error}\r\n      {isLoading && <Loader />}\r\n      {!isLoading && !contacts.length && <strong>No contacts</strong>}\r\n      {contacts?.map((contact) => (\r\n        <Contact contact={contact} key={contact.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ContactsList;\r\n","import React, { useEffect } from \"react\";\r\n//Store\r\nimport { editableContactInit } from \"../store/reducers/contacts/index\";\r\n//Hooks\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\r\nimport { useActions } from \"../hooks/useActions\";\r\nimport useContactSearch from \"../hooks/useContactsSearch\";\r\n//Components\r\nimport ContactForm from \"../components/ContactForm\";\r\n\r\n//Antd\r\nimport { Modal, Input } from \"antd\";\r\nimport { PlusCircleFilled } from \"@ant-design/icons\";\r\nimport ContactsList from \"../components/ContactsList\";\r\nimport { IContact } from \"../models/IContact\";\r\n\r\nconst Contacts = () => {\r\n  //Redux Actions\r\n  const {\r\n    setEditableContact,\r\n    setMethodForm,\r\n    fetchContacts,\r\n    setIsShowModalContact,\r\n    addAllContact,\r\n  } = useActions();\r\n\r\n  //Redux State\r\n  const { user } = useTypedSelector((state) => state.authReducer);\r\n  const { contacts, isShowModalContact } = useTypedSelector(\r\n    (state) => state.contactsReducer\r\n  );\r\n\r\n  //Helper hooks\r\n  const { filteredContacts, onSearchChange } = useContactSearch(contacts);\r\n\r\n  const onAddContactCLick = () => {\r\n    setEditableContact(editableContactInit);\r\n    setMethodForm(\"add-contact\");\r\n    setIsShowModalContact(true);\r\n  };\r\n\r\n  const onCancelModalClick = () => setIsShowModalContact(false);\r\n\r\n  useEffect(() => {\r\n    fetchContacts(user.id);\r\n    return () => {\r\n      addAllContact([] as IContact[]);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"contacts-wrap\">\r\n      <Input.Search\r\n        style={{ margin: \"20px auto\", width: \"300px\" }}\r\n        placeholder=\"Search by...\"\r\n        enterButton\r\n        autoFocus\r\n        onChange={onSearchChange}\r\n      />\r\n\r\n      <ContactsList contacts={filteredContacts} />\r\n\r\n      <PlusCircleFilled\r\n        onClick={onAddContactCLick}\r\n        className=\"contact-add-btn\"\r\n      />\r\n\r\n      <Modal\r\n        visible={isShowModalContact}\r\n        footer={null}\r\n        closable={false}\r\n        onCancel={onCancelModalClick}\r\n        destroyOnClose={true}\r\n      >\r\n        <ContactForm />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { privateRoutes, publicRoutes, RouteNames } from \".\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\n\nconst AppRouter = () => {\n  const { isAuth } = useTypedSelector((state) => state.authReducer);\n\n  return isAuth ? (\n    <Switch>\n      {privateRoutes.map((route) => (\n        <Route\n          path={route.path}\n          exact={route.exact}\n          component={route.component}\n          key={route.path}\n        />\n      ))}\n      <Redirect to={RouteNames.CONTACTS} />\n    </Switch>\n  ) : (\n    <Switch>\n      {publicRoutes.map((route) => (\n        <Route\n          path={route.path}\n          exact={route.exact}\n          component={route.component}\n          key={route.path}\n        />\n      ))}\n      <Redirect to={RouteNames.LOGIN} />\n    </Switch>\n  );\n};\n\nexport default AppRouter;\n","import React, { FC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { RouteNames } from \"../router\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\nimport { useActions } from \"../hooks/useActions\";\nimport { Layout, Menu, Row } from \"antd\";\n\nconst Navbar: FC = () => {\n  const router = useHistory();\n  const { isAuth, user } = useTypedSelector((state) => state.authReducer);\n  const { logout } = useActions();\n\n  const loginHandle = () => {\n    router.push(RouteNames.LOGIN);\n  };\n\n  return (\n    <Layout.Header>\n      <Row justify=\"end\">\n        {isAuth ? (\n          <>\n            <div style={{ color: \"white\" }}>{user.username}</div>\n            <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n              <Menu.Item onClick={logout} key={1}>\n                Log out\n              </Menu.Item>\n            </Menu>\n          </>\n        ) : (\n          <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n            <Menu.Item onClick={loginHandle} key={2}>\n              Sign in\n            </Menu.Item>\n          </Menu>\n        )}\n      </Row>\n    </Layout.Header>\n  );\n};\n\nexport default Navbar;\n","import React, { FC, useEffect } from \"react\";\nimport \"./css/root.css\";\nimport AppRouter from \"./router/AppRouter\";\nimport Navbar from \"./components/Navbar\";\nimport { useActions } from \"./hooks/useActions\";\nimport { IUser } from \"./models/IUser\";\nimport { Layout } from \"antd\";\n\nconst App: FC = () => {\n  const { setUser, setIsAuth } = useActions();\n\n  useEffect(() => {\n    const lsUser = localStorage.getItem(\"user\");\n    if (lsUser) {\n      setUser(JSON.parse(lsUser) as IUser);\n      setIsAuth(true);\n    }\n  }, []);\n\n  return (\n    <Layout style={{ backgroundColor: \"white\", overflow: \"hidden\" }}>\n      <Navbar />\n      <Layout.Content style={{ maxWidth: \"1000px\", margin: \"0 auto\" }}>\n        <AppRouter />\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","import { AuthAction, AuthActionEnum, AuthState } from \"./types\";\nimport { IUser } from \"../../../models/IUser\";\n\nconst initialState: AuthState = {\n  isAuth: false,\n  error: \"\",\n  isLoading: false,\n  user: {} as IUser,\n};\n\nexport default function authReducer(\n  state = initialState,\n  action: AuthAction\n): AuthState {\n  switch (action.type) {\n    case AuthActionEnum.SET_AUTH:\n      return { ...state, isAuth: action.payload, isLoading: false };\n\n    case AuthActionEnum.SET_USER:\n      return { ...state, user: action.payload };\n\n    case AuthActionEnum.SET_ERROR:\n      return { ...state, error: action.payload, isLoading: false };\n\n    case AuthActionEnum.SET_IS_LOADING:\n      return { ...state, isLoading: action.payload };\n\n    default:\n      return state;\n  }\n}\n","import authReducer from \"./auth\";\nimport contactsReducer from \"./contacts\";\n\nexport default {\n  authReducer,\n  contactsReducer,\n};\n","import { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst rootReducer = combineReducers(reducers);\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}